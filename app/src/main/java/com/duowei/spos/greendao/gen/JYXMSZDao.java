package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.JYXMSZ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JYXMSZ".
*/
public class JYXMSZDao extends AbstractDao<JYXMSZ, Void> {

    public static final String TABLENAME = "JYXMSZ";

    /**
     * Properties of entity JYXMSZ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property XMBH = new Property(0, String.class, "XMBH", false, "XMBH");
        public final static Property XMMC = new Property(1, String.class, "XMMC", false, "XMMC");
        public final static Property PY = new Property(2, String.class, "PY", false, "PY");
        public final static Property TM = new Property(3, String.class, "TM", false, "TM");
        public final static Property DW = new Property(4, String.class, "DW", false, "DW");
        public final static Property LBBM = new Property(5, String.class, "LBBM", false, "LBBM");
        public final static Property LBMC = new Property(6, String.class, "LBMC", false, "LBMC");
        public final static Property SFTC = new Property(7, String.class, "SFTC", false, "SFTC");
        public final static Property CBJG = new Property(8, String.class, "CBJG", false, "CBJG");
        public final static Property SFQX = new Property(9, String.class, "SFQX", false, "SFQX");
        public final static Property XGSJ = new Property(10, String.class, "XGSJ", false, "XGSJ");
        public final static Property BY2 = new Property(11, String.class, "BY2", false, "BY2");
        public final static Property BY5 = new Property(12, String.class, "BY5", false, "BY5");
        public final static Property SFTY = new Property(13, String.class, "SFTY", false, "SFTY");
        public final static Property XL = new Property(14, float.class, "XL", false, "XL");
        public final static Property BCYZDDZ = new Property(15, String.class, "BCYZDDZ", false, "BCYZDDZ");
        public final static Property BY9 = new Property(16, String.class, "BY9", false, "BY9");
        public final static Property Id = new Property(17, String.class, "id", false, "ID");
        public final static Property XSJG = new Property(18, float.class, "XSJG", false, "XSJG");
        public final static Property LBXL = new Property(19, String.class, "LBXL", false, "LBXL");
    }


    public JYXMSZDao(DaoConfig config) {
        super(config);
    }
    
    public JYXMSZDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JYXMSZ\" (" + //
                "\"XMBH\" TEXT," + // 0: XMBH
                "\"XMMC\" TEXT," + // 1: XMMC
                "\"PY\" TEXT," + // 2: PY
                "\"TM\" TEXT," + // 3: TM
                "\"DW\" TEXT," + // 4: DW
                "\"LBBM\" TEXT," + // 5: LBBM
                "\"LBMC\" TEXT," + // 6: LBMC
                "\"SFTC\" TEXT," + // 7: SFTC
                "\"CBJG\" TEXT," + // 8: CBJG
                "\"SFQX\" TEXT," + // 9: SFQX
                "\"XGSJ\" TEXT," + // 10: XGSJ
                "\"BY2\" TEXT," + // 11: BY2
                "\"BY5\" TEXT," + // 12: BY5
                "\"SFTY\" TEXT," + // 13: SFTY
                "\"XL\" REAL NOT NULL ," + // 14: XL
                "\"BCYZDDZ\" TEXT," + // 15: BCYZDDZ
                "\"BY9\" TEXT," + // 16: BY9
                "\"ID\" TEXT," + // 17: id
                "\"XSJG\" REAL NOT NULL ," + // 18: XSJG
                "\"LBXL\" TEXT);"); // 19: LBXL
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JYXMSZ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JYXMSZ entity) {
        stmt.clearBindings();
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(1, XMBH);
        }
 
        String XMMC = entity.getXMMC();
        if (XMMC != null) {
            stmt.bindString(2, XMMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(4, TM);
        }
 
        String DW = entity.getDW();
        if (DW != null) {
            stmt.bindString(5, DW);
        }
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(6, LBBM);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(7, LBMC);
        }
 
        String SFTC = entity.getSFTC();
        if (SFTC != null) {
            stmt.bindString(8, SFTC);
        }
 
        String CBJG = entity.getCBJG();
        if (CBJG != null) {
            stmt.bindString(9, CBJG);
        }
 
        String SFQX = entity.getSFQX();
        if (SFQX != null) {
            stmt.bindString(10, SFQX);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(11, XGSJ);
        }
 
        String BY2 = entity.getBY2();
        if (BY2 != null) {
            stmt.bindString(12, BY2);
        }
 
        String BY5 = entity.getBY5();
        if (BY5 != null) {
            stmt.bindString(13, BY5);
        }
 
        String SFTY = entity.getSFTY();
        if (SFTY != null) {
            stmt.bindString(14, SFTY);
        }
        stmt.bindDouble(15, entity.getXL());
 
        String BCYZDDZ = entity.getBCYZDDZ();
        if (BCYZDDZ != null) {
            stmt.bindString(16, BCYZDDZ);
        }
 
        String BY9 = entity.getBY9();
        if (BY9 != null) {
            stmt.bindString(17, BY9);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(18, id);
        }
        stmt.bindDouble(19, entity.getXSJG());
 
        String LBXL = entity.getLBXL();
        if (LBXL != null) {
            stmt.bindString(20, LBXL);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JYXMSZ entity) {
        stmt.clearBindings();
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(1, XMBH);
        }
 
        String XMMC = entity.getXMMC();
        if (XMMC != null) {
            stmt.bindString(2, XMMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(4, TM);
        }
 
        String DW = entity.getDW();
        if (DW != null) {
            stmt.bindString(5, DW);
        }
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(6, LBBM);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(7, LBMC);
        }
 
        String SFTC = entity.getSFTC();
        if (SFTC != null) {
            stmt.bindString(8, SFTC);
        }
 
        String CBJG = entity.getCBJG();
        if (CBJG != null) {
            stmt.bindString(9, CBJG);
        }
 
        String SFQX = entity.getSFQX();
        if (SFQX != null) {
            stmt.bindString(10, SFQX);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(11, XGSJ);
        }
 
        String BY2 = entity.getBY2();
        if (BY2 != null) {
            stmt.bindString(12, BY2);
        }
 
        String BY5 = entity.getBY5();
        if (BY5 != null) {
            stmt.bindString(13, BY5);
        }
 
        String SFTY = entity.getSFTY();
        if (SFTY != null) {
            stmt.bindString(14, SFTY);
        }
        stmt.bindDouble(15, entity.getXL());
 
        String BCYZDDZ = entity.getBCYZDDZ();
        if (BCYZDDZ != null) {
            stmt.bindString(16, BCYZDDZ);
        }
 
        String BY9 = entity.getBY9();
        if (BY9 != null) {
            stmt.bindString(17, BY9);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(18, id);
        }
        stmt.bindDouble(19, entity.getXSJG());
 
        String LBXL = entity.getLBXL();
        if (LBXL != null) {
            stmt.bindString(20, LBXL);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public JYXMSZ readEntity(Cursor cursor, int offset) {
        JYXMSZ entity = new JYXMSZ( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // XMBH
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XMMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TM
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LBBM
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LBMC
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SFTC
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CBJG
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SFQX
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // XGSJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BY2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BY5
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // SFTY
            cursor.getFloat(offset + 14), // XL
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // BCYZDDZ
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // BY9
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // id
            cursor.getFloat(offset + 18), // XSJG
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // LBXL
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JYXMSZ entity, int offset) {
        entity.setXMBH(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setXMMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPY(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLBBM(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLBMC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSFTC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCBJG(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSFQX(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setXGSJ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBY2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBY5(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSFTY(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setXL(cursor.getFloat(offset + 14));
        entity.setBCYZDDZ(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBY9(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setXSJG(cursor.getFloat(offset + 18));
        entity.setLBXL(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(JYXMSZ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(JYXMSZ entity) {
        return null;
    }

    @Override
    public boolean hasKey(JYXMSZ entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
