package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.JGSZ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JGSZ".
*/
public class JGSZDao extends AbstractDao<JGSZ, Void> {

    public static final String TABLENAME = "JGSZ";

    /**
     * Properties of entity JGSZ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BMBH = new Property(0, String.class, "BMBH", false, "BMBH");
        public final static Property BMMC = new Property(1, String.class, "BMMC", false, "BMMC");
        public final static Property PY = new Property(2, String.class, "PY", false, "PY");
        public final static Property LXDH = new Property(3, String.class, "LXDH", false, "LXDH");
        public final static Property WXZFID = new Property(4, String.class, "WXZFID", false, "WXZFID");
        public final static Property ZFBAPPID = new Property(5, String.class, "ZFBAPPID", false, "ZFBAPPID");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Id = new Property(7, String.class, "id", false, "ID");
        public final static Property Overdue_date = new Property(8, String.class, "overdue_date", false, "OVERDUE_DATE");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
        public final static Property Yysj = new Property(10, String.class, "yysj", false, "YYSJ");
    }


    public JGSZDao(DaoConfig config) {
        super(config);
    }
    
    public JGSZDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JGSZ\" (" + //
                "\"BMBH\" TEXT," + // 0: BMBH
                "\"BMMC\" TEXT," + // 1: BMMC
                "\"PY\" TEXT," + // 2: PY
                "\"LXDH\" TEXT," + // 3: LXDH
                "\"WXZFID\" TEXT," + // 4: WXZFID
                "\"ZFBAPPID\" TEXT," + // 5: ZFBAPPID
                "\"TYPE\" TEXT," + // 6: type
                "\"ID\" TEXT," + // 7: id
                "\"OVERDUE_DATE\" TEXT," + // 8: overdue_date
                "\"STATE\" TEXT," + // 9: state
                "\"YYSJ\" TEXT);"); // 10: yysj
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JGSZ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JGSZ entity) {
        stmt.clearBindings();
 
        String BMBH = entity.getBMBH();
        if (BMBH != null) {
            stmt.bindString(1, BMBH);
        }
 
        String BMMC = entity.getBMMC();
        if (BMMC != null) {
            stmt.bindString(2, BMMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String LXDH = entity.getLXDH();
        if (LXDH != null) {
            stmt.bindString(4, LXDH);
        }
 
        String WXZFID = entity.getWXZFID();
        if (WXZFID != null) {
            stmt.bindString(5, WXZFID);
        }
 
        String ZFBAPPID = entity.getZFBAPPID();
        if (ZFBAPPID != null) {
            stmt.bindString(6, ZFBAPPID);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String overdue_date = entity.getOverdue_date();
        if (overdue_date != null) {
            stmt.bindString(9, overdue_date);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String yysj = entity.getYysj();
        if (yysj != null) {
            stmt.bindString(11, yysj);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JGSZ entity) {
        stmt.clearBindings();
 
        String BMBH = entity.getBMBH();
        if (BMBH != null) {
            stmt.bindString(1, BMBH);
        }
 
        String BMMC = entity.getBMMC();
        if (BMMC != null) {
            stmt.bindString(2, BMMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String LXDH = entity.getLXDH();
        if (LXDH != null) {
            stmt.bindString(4, LXDH);
        }
 
        String WXZFID = entity.getWXZFID();
        if (WXZFID != null) {
            stmt.bindString(5, WXZFID);
        }
 
        String ZFBAPPID = entity.getZFBAPPID();
        if (ZFBAPPID != null) {
            stmt.bindString(6, ZFBAPPID);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String overdue_date = entity.getOverdue_date();
        if (overdue_date != null) {
            stmt.bindString(9, overdue_date);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String yysj = entity.getYysj();
        if (yysj != null) {
            stmt.bindString(11, yysj);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public JGSZ readEntity(Cursor cursor, int offset) {
        JGSZ entity = new JGSZ( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // BMBH
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BMMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LXDH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // WXZFID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ZFBAPPID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // overdue_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // yysj
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JGSZ entity, int offset) {
        entity.setBMBH(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBMMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPY(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLXDH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWXZFID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZFBAPPID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOverdue_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYysj(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(JGSZ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(JGSZ entity) {
        return null;
    }

    @Override
    public boolean hasKey(JGSZ entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
