package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.DMPZSD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DMPZSD".
*/
public class DMPZSDDao extends AbstractDao<DMPZSD, Long> {

    public static final String TABLENAME = "DMPZSD";

    /**
     * Properties of entity DMPZSD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property PZBM = new Property(1, String.class, "PZBM", false, "PZBM");
        public final static Property XMBH = new Property(2, String.class, "XMBH", false, "XMBH");
        public final static Property NR = new Property(3, String.class, "NR", false, "NR");
        public final static Property DYCP = new Property(4, String.class, "DYCP", false, "DYCP");
        public final static Property PXH = new Property(5, String.class, "PXH", false, "PXH");
        public final static Property LX = new Property(6, String.class, "LX", false, "LX");
        public final static Property PPMC = new Property(7, String.class, "PPMC", false, "PPMC");
        public final static Property Price = new Property(8, String.class, "price", false, "PRICE");
        public final static Property Id = new Property(9, String.class, "id", false, "ID");
    }


    public DMPZSDDao(DaoConfig config) {
        super(config);
    }
    
    public DMPZSDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DMPZSD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"PZBM\" TEXT," + // 1: PZBM
                "\"XMBH\" TEXT," + // 2: XMBH
                "\"NR\" TEXT," + // 3: NR
                "\"DYCP\" TEXT," + // 4: DYCP
                "\"PXH\" TEXT," + // 5: PXH
                "\"LX\" TEXT," + // 6: LX
                "\"PPMC\" TEXT," + // 7: PPMC
                "\"PRICE\" TEXT," + // 8: price
                "\"ID\" TEXT);"); // 9: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DMPZSD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DMPZSD entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String PZBM = entity.getPZBM();
        if (PZBM != null) {
            stmt.bindString(2, PZBM);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String NR = entity.getNR();
        if (NR != null) {
            stmt.bindString(4, NR);
        }
 
        String DYCP = entity.getDYCP();
        if (DYCP != null) {
            stmt.bindString(5, DYCP);
        }
 
        String PXH = entity.getPXH();
        if (PXH != null) {
            stmt.bindString(6, PXH);
        }
 
        String LX = entity.getLX();
        if (LX != null) {
            stmt.bindString(7, LX);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(8, PPMC);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(10, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DMPZSD entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String PZBM = entity.getPZBM();
        if (PZBM != null) {
            stmt.bindString(2, PZBM);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String NR = entity.getNR();
        if (NR != null) {
            stmt.bindString(4, NR);
        }
 
        String DYCP = entity.getDYCP();
        if (DYCP != null) {
            stmt.bindString(5, DYCP);
        }
 
        String PXH = entity.getPXH();
        if (PXH != null) {
            stmt.bindString(6, PXH);
        }
 
        String LX = entity.getLX();
        if (LX != null) {
            stmt.bindString(7, LX);
        }
 
        String PPMC = entity.getPPMC();
        if (PPMC != null) {
            stmt.bindString(8, PPMC);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(10, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DMPZSD readEntity(Cursor cursor, int offset) {
        DMPZSD entity = new DMPZSD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PZBM
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XMBH
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NR
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DYCP
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PXH
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LX
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PPMC
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DMPZSD entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPZBM(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXMBH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNR(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDYCP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPXH(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLX(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPPMC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DMPZSD entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DMPZSD entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DMPZSD entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
