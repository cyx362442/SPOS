package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.WMLSB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WMLSB".
*/
public class WMLSBDao extends AbstractDao<WMLSB, Long> {

    public static final String TABLENAME = "WMLSB";

    /**
     * Properties of entity WMLSB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xh = new Property(1, int.class, "xh", false, "XH");
        public final static Property Wmdbh = new Property(2, String.class, "wmdbh", false, "WMDBH");
        public final static Property Xmbh = new Property(3, String.class, "xmbh", false, "XMBH");
        public final static Property Xmmc = new Property(4, String.class, "xmmc", false, "XMMC");
        public final static Property Tm = new Property(5, String.class, "tm", false, "TM");
        public final static Property By2 = new Property(6, String.class, "by2", false, "BY2");
        public final static Property Dw = new Property(7, String.class, "dw", false, "DW");
        public final static Property Sl = new Property(8, float.class, "sl", false, "SL");
        public final static Property Ysjg = new Property(9, float.class, "ysjg", false, "YSJG");
        public final static Property Dj = new Property(10, float.class, "dj", false, "DJ");
        public final static Property Xj = new Property(11, float.class, "xj", false, "XJ");
        public final static Property Pz = new Property(12, String.class, "pz", false, "PZ");
        public final static Property Sfyxd = new Property(13, String.class, "sfyxd", false, "SFYXD");
        public final static Property Xszt = new Property(14, String.class, "xszt", false, "XSZT");
        public final static Property Syyxm = new Property(15, String.class, "syyxm", false, "SYYXM");
        public final static Property Sfxs = new Property(16, String.class, "sfxs", false, "SFXS");
        public final static Property By5 = new Property(17, String.class, "by5", false, "BY5");
        public final static Property Tcbh = new Property(18, String.class, "tcbh", false, "TCBH");
        public final static Property Tcxmbh = new Property(19, String.class, "tcxmbh", false, "TCXMBH");
        public final static Property By15 = new Property(20, String.class, "by15", false, "BY15");
        public final static Property By13 = new Property(21, String.class, "by13", false, "BY13");
        public final static Property Sfzs = new Property(22, String.class, "sfzs", false, "SFZS");
        public final static Property Zssj = new Property(23, String.class, "zssj", false, "ZSSJ");
        public final static Property Sqrxm = new Property(24, String.class, "sqrxm", false, "SQRXM");
        public final static Property By12 = new Property(25, String.class, "by12", false, "BY12");
        public final static Property By3 = new Property(26, String.class, "by3", false, "BY3");
        public final static Property Dwsl = new Property(27, float.class, "dwsl", false, "DWSL");
        public final static Property By17 = new Property(28, String.class, "by17", false, "BY17");
        public final static Property By21 = new Property(29, String.class, "by21", false, "BY21");
        public final static Property By1 = new Property(30, String.class, "by1", false, "BY1");
        public final static Property Kwjj = new Property(31, float.class, "kwjj", false, "KWJJ");
        public final static Property Lbmc = new Property(32, String.class, "lbmc", false, "LBMC");
    }


    public WMLSBDao(DaoConfig config) {
        super(config);
    }
    
    public WMLSBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WMLSB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XH\" INTEGER NOT NULL ," + // 1: xh
                "\"WMDBH\" TEXT," + // 2: wmdbh
                "\"XMBH\" TEXT," + // 3: xmbh
                "\"XMMC\" TEXT," + // 4: xmmc
                "\"TM\" TEXT," + // 5: tm
                "\"BY2\" TEXT," + // 6: by2
                "\"DW\" TEXT," + // 7: dw
                "\"SL\" REAL NOT NULL ," + // 8: sl
                "\"YSJG\" REAL NOT NULL ," + // 9: ysjg
                "\"DJ\" REAL NOT NULL ," + // 10: dj
                "\"XJ\" REAL NOT NULL ," + // 11: xj
                "\"PZ\" TEXT," + // 12: pz
                "\"SFYXD\" TEXT," + // 13: sfyxd
                "\"XSZT\" TEXT," + // 14: xszt
                "\"SYYXM\" TEXT," + // 15: syyxm
                "\"SFXS\" TEXT," + // 16: sfxs
                "\"BY5\" TEXT," + // 17: by5
                "\"TCBH\" TEXT," + // 18: tcbh
                "\"TCXMBH\" TEXT," + // 19: tcxmbh
                "\"BY15\" TEXT," + // 20: by15
                "\"BY13\" TEXT," + // 21: by13
                "\"SFZS\" TEXT," + // 22: sfzs
                "\"ZSSJ\" TEXT," + // 23: zssj
                "\"SQRXM\" TEXT," + // 24: sqrxm
                "\"BY12\" TEXT," + // 25: by12
                "\"BY3\" TEXT," + // 26: by3
                "\"DWSL\" REAL NOT NULL ," + // 27: dwsl
                "\"BY17\" TEXT," + // 28: by17
                "\"BY21\" TEXT," + // 29: by21
                "\"BY1\" TEXT," + // 30: by1
                "\"KWJJ\" REAL NOT NULL ," + // 31: kwjj
                "\"LBMC\" TEXT);"); // 32: lbmc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WMLSB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WMLSB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getXh());
 
        String wmdbh = entity.getWmdbh();
        if (wmdbh != null) {
            stmt.bindString(3, wmdbh);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(4, xmbh);
        }
 
        String xmmc = entity.getXmmc();
        if (xmmc != null) {
            stmt.bindString(5, xmmc);
        }
 
        String tm = entity.getTm();
        if (tm != null) {
            stmt.bindString(6, tm);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(7, by2);
        }
 
        String dw = entity.getDw();
        if (dw != null) {
            stmt.bindString(8, dw);
        }
        stmt.bindDouble(9, entity.getSl());
        stmt.bindDouble(10, entity.getYsjg());
        stmt.bindDouble(11, entity.getDj());
        stmt.bindDouble(12, entity.getXj());
 
        String pz = entity.getPz();
        if (pz != null) {
            stmt.bindString(13, pz);
        }
 
        String sfyxd = entity.getSfyxd();
        if (sfyxd != null) {
            stmt.bindString(14, sfyxd);
        }
 
        String xszt = entity.getXszt();
        if (xszt != null) {
            stmt.bindString(15, xszt);
        }
 
        String syyxm = entity.getSyyxm();
        if (syyxm != null) {
            stmt.bindString(16, syyxm);
        }
 
        String sfxs = entity.getSfxs();
        if (sfxs != null) {
            stmt.bindString(17, sfxs);
        }
 
        String by5 = entity.getBy5();
        if (by5 != null) {
            stmt.bindString(18, by5);
        }
 
        String tcbh = entity.getTcbh();
        if (tcbh != null) {
            stmt.bindString(19, tcbh);
        }
 
        String tcxmbh = entity.getTcxmbh();
        if (tcxmbh != null) {
            stmt.bindString(20, tcxmbh);
        }
 
        String by15 = entity.getBy15();
        if (by15 != null) {
            stmt.bindString(21, by15);
        }
 
        String by13 = entity.getBy13();
        if (by13 != null) {
            stmt.bindString(22, by13);
        }
 
        String sfzs = entity.getSfzs();
        if (sfzs != null) {
            stmt.bindString(23, sfzs);
        }
 
        String zssj = entity.getZssj();
        if (zssj != null) {
            stmt.bindString(24, zssj);
        }
 
        String sqrxm = entity.getSqrxm();
        if (sqrxm != null) {
            stmt.bindString(25, sqrxm);
        }
 
        String by12 = entity.getBy12();
        if (by12 != null) {
            stmt.bindString(26, by12);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(27, by3);
        }
        stmt.bindDouble(28, entity.getDwsl());
 
        String by17 = entity.getBy17();
        if (by17 != null) {
            stmt.bindString(29, by17);
        }
 
        String by21 = entity.getBy21();
        if (by21 != null) {
            stmt.bindString(30, by21);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(31, by1);
        }
        stmt.bindDouble(32, entity.getKwjj());
 
        String lbmc = entity.getLbmc();
        if (lbmc != null) {
            stmt.bindString(33, lbmc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WMLSB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getXh());
 
        String wmdbh = entity.getWmdbh();
        if (wmdbh != null) {
            stmt.bindString(3, wmdbh);
        }
 
        String xmbh = entity.getXmbh();
        if (xmbh != null) {
            stmt.bindString(4, xmbh);
        }
 
        String xmmc = entity.getXmmc();
        if (xmmc != null) {
            stmt.bindString(5, xmmc);
        }
 
        String tm = entity.getTm();
        if (tm != null) {
            stmt.bindString(6, tm);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(7, by2);
        }
 
        String dw = entity.getDw();
        if (dw != null) {
            stmt.bindString(8, dw);
        }
        stmt.bindDouble(9, entity.getSl());
        stmt.bindDouble(10, entity.getYsjg());
        stmt.bindDouble(11, entity.getDj());
        stmt.bindDouble(12, entity.getXj());
 
        String pz = entity.getPz();
        if (pz != null) {
            stmt.bindString(13, pz);
        }
 
        String sfyxd = entity.getSfyxd();
        if (sfyxd != null) {
            stmt.bindString(14, sfyxd);
        }
 
        String xszt = entity.getXszt();
        if (xszt != null) {
            stmt.bindString(15, xszt);
        }
 
        String syyxm = entity.getSyyxm();
        if (syyxm != null) {
            stmt.bindString(16, syyxm);
        }
 
        String sfxs = entity.getSfxs();
        if (sfxs != null) {
            stmt.bindString(17, sfxs);
        }
 
        String by5 = entity.getBy5();
        if (by5 != null) {
            stmt.bindString(18, by5);
        }
 
        String tcbh = entity.getTcbh();
        if (tcbh != null) {
            stmt.bindString(19, tcbh);
        }
 
        String tcxmbh = entity.getTcxmbh();
        if (tcxmbh != null) {
            stmt.bindString(20, tcxmbh);
        }
 
        String by15 = entity.getBy15();
        if (by15 != null) {
            stmt.bindString(21, by15);
        }
 
        String by13 = entity.getBy13();
        if (by13 != null) {
            stmt.bindString(22, by13);
        }
 
        String sfzs = entity.getSfzs();
        if (sfzs != null) {
            stmt.bindString(23, sfzs);
        }
 
        String zssj = entity.getZssj();
        if (zssj != null) {
            stmt.bindString(24, zssj);
        }
 
        String sqrxm = entity.getSqrxm();
        if (sqrxm != null) {
            stmt.bindString(25, sqrxm);
        }
 
        String by12 = entity.getBy12();
        if (by12 != null) {
            stmt.bindString(26, by12);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(27, by3);
        }
        stmt.bindDouble(28, entity.getDwsl());
 
        String by17 = entity.getBy17();
        if (by17 != null) {
            stmt.bindString(29, by17);
        }
 
        String by21 = entity.getBy21();
        if (by21 != null) {
            stmt.bindString(30, by21);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(31, by1);
        }
        stmt.bindDouble(32, entity.getKwjj());
 
        String lbmc = entity.getLbmc();
        if (lbmc != null) {
            stmt.bindString(33, lbmc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WMLSB readEntity(Cursor cursor, int offset) {
        WMLSB entity = new WMLSB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // xh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wmdbh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xmbh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xmmc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // by2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dw
            cursor.getFloat(offset + 8), // sl
            cursor.getFloat(offset + 9), // ysjg
            cursor.getFloat(offset + 10), // dj
            cursor.getFloat(offset + 11), // xj
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pz
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sfyxd
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // xszt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // syyxm
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // sfxs
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // by5
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tcbh
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // tcxmbh
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // by15
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // by13
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // sfzs
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // zssj
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // sqrxm
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // by12
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // by3
            cursor.getFloat(offset + 27), // dwsl
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // by17
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // by21
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // by1
            cursor.getFloat(offset + 31), // kwjj
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // lbmc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WMLSB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXh(cursor.getInt(offset + 1));
        entity.setWmdbh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXmbh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXmmc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBy2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDw(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSl(cursor.getFloat(offset + 8));
        entity.setYsjg(cursor.getFloat(offset + 9));
        entity.setDj(cursor.getFloat(offset + 10));
        entity.setXj(cursor.getFloat(offset + 11));
        entity.setPz(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSfyxd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setXszt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSyyxm(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSfxs(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBy5(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTcbh(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTcxmbh(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBy15(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBy13(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSfzs(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setZssj(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSqrxm(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBy12(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBy3(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDwsl(cursor.getFloat(offset + 27));
        entity.setBy17(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setBy21(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setBy1(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setKwjj(cursor.getFloat(offset + 31));
        entity.setLbmc(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WMLSB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WMLSB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WMLSB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
