package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.DMJYXMSSLB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DMJYXMSSLB".
*/
public class DMJYXMSSLBDao extends AbstractDao<DMJYXMSSLB, Void> {

    public static final String TABLENAME = "DMJYXMSSLB";

    /**
     * Properties of entity DMJYXMSSLB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LBBM = new Property(0, String.class, "LBBM", false, "LBBM");
        public final static Property LBMC = new Property(1, String.class, "LBMC", false, "LBMC");
        public final static Property PY = new Property(2, String.class, "PY", false, "PY");
        public final static Property FLBBM = new Property(3, String.class, "FLBBM", false, "FLBBM");
        public final static Property XGSJ = new Property(4, String.class, "XGSJ", false, "XGSJ");
        public final static Property SFXS = new Property(5, String.class, "SFXS", false, "SFXS");
        public final static Property SFTY = new Property(6, String.class, "SFTY", false, "SFTY");
        public final static Property XL = new Property(7, String.class, "XL", false, "XL");
        public final static Property Id = new Property(8, String.class, "id", false, "ID");
    }


    public DMJYXMSSLBDao(DaoConfig config) {
        super(config);
    }
    
    public DMJYXMSSLBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DMJYXMSSLB\" (" + //
                "\"LBBM\" TEXT," + // 0: LBBM
                "\"LBMC\" TEXT," + // 1: LBMC
                "\"PY\" TEXT," + // 2: PY
                "\"FLBBM\" TEXT," + // 3: FLBBM
                "\"XGSJ\" TEXT," + // 4: XGSJ
                "\"SFXS\" TEXT," + // 5: SFXS
                "\"SFTY\" TEXT," + // 6: SFTY
                "\"XL\" TEXT," + // 7: XL
                "\"ID\" TEXT);"); // 8: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DMJYXMSSLB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DMJYXMSSLB entity) {
        stmt.clearBindings();
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(1, LBBM);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(2, LBMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String FLBBM = entity.getFLBBM();
        if (FLBBM != null) {
            stmt.bindString(4, FLBBM);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(5, XGSJ);
        }
 
        String SFXS = entity.getSFXS();
        if (SFXS != null) {
            stmt.bindString(6, SFXS);
        }
 
        String SFTY = entity.getSFTY();
        if (SFTY != null) {
            stmt.bindString(7, SFTY);
        }
 
        String XL = entity.getXL();
        if (XL != null) {
            stmt.bindString(8, XL);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DMJYXMSSLB entity) {
        stmt.clearBindings();
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(1, LBBM);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(2, LBMC);
        }
 
        String PY = entity.getPY();
        if (PY != null) {
            stmt.bindString(3, PY);
        }
 
        String FLBBM = entity.getFLBBM();
        if (FLBBM != null) {
            stmt.bindString(4, FLBBM);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(5, XGSJ);
        }
 
        String SFXS = entity.getSFXS();
        if (SFXS != null) {
            stmt.bindString(6, SFXS);
        }
 
        String SFTY = entity.getSFTY();
        if (SFTY != null) {
            stmt.bindString(7, SFTY);
        }
 
        String XL = entity.getXL();
        if (XL != null) {
            stmt.bindString(8, XL);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(9, id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DMJYXMSSLB readEntity(Cursor cursor, int offset) {
        DMJYXMSSLB entity = new DMJYXMSSLB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // LBBM
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LBMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FLBBM
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // XGSJ
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SFXS
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SFTY
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // XL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DMJYXMSSLB entity, int offset) {
        entity.setLBBM(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLBMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPY(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFLBBM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXGSJ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSFXS(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSFTY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DMJYXMSSLB entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DMJYXMSSLB entity) {
        return null;
    }

    @Override
    public boolean hasKey(DMJYXMSSLB entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
