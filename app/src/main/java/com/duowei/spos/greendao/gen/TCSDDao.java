package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.TCSD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TCSD".
*/
public class TCSDDao extends AbstractDao<TCSD, Long> {

    public static final String TABLENAME = "TCSD";

    /**
     * Properties of entity TCSD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property XH = new Property(1, String.class, "XH", false, "XH");
        public final static Property XMBH = new Property(2, String.class, "XMBH", false, "XMBH");
        public final static Property XMBH1 = new Property(3, String.class, "XMBH1", false, "XMBH1");
        public final static Property XMMC1 = new Property(4, String.class, "XMMC1", false, "XMMC1");
        public final static Property DW1 = new Property(5, String.class, "DW1", false, "DW1");
        public final static Property SL = new Property(6, float.class, "SL", false, "SL");
        public final static Property SFXZ = new Property(7, String.class, "SFXZ", false, "SFXZ");
        public final static Property TM = new Property(8, String.class, "TM", false, "TM");
        public final static Property XGSJ = new Property(9, String.class, "XGSJ", false, "XGSJ");
        public final static Property DJ = new Property(10, float.class, "DJ", false, "DJ");
        public final static Property BZ = new Property(11, String.class, "BZ", false, "BZ");
        public final static Property LBBM = new Property(12, String.class, "LBBM", false, "LBBM");
        public final static Property NBBM = new Property(13, String.class, "NBBM", false, "NBBM");
        public final static Property MXBY1 = new Property(14, String.class, "MXBY1", false, "MXBY1");
        public final static Property MXBY2 = new Property(15, String.class, "MXBY2", false, "MXBY2");
        public final static Property MXBY3 = new Property(16, String.class, "MXBY3", false, "MXBY3");
        public final static Property MXBY4 = new Property(17, String.class, "MXBY4", false, "MXBY4");
        public final static Property LBMC = new Property(18, String.class, "LBMC", false, "LBMC");
    }


    public TCSDDao(DaoConfig config) {
        super(config);
    }
    
    public TCSDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TCSD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"XH\" TEXT," + // 1: XH
                "\"XMBH\" TEXT," + // 2: XMBH
                "\"XMBH1\" TEXT," + // 3: XMBH1
                "\"XMMC1\" TEXT," + // 4: XMMC1
                "\"DW1\" TEXT," + // 5: DW1
                "\"SL\" REAL NOT NULL ," + // 6: SL
                "\"SFXZ\" TEXT," + // 7: SFXZ
                "\"TM\" TEXT," + // 8: TM
                "\"XGSJ\" TEXT," + // 9: XGSJ
                "\"DJ\" REAL NOT NULL ," + // 10: DJ
                "\"BZ\" TEXT," + // 11: BZ
                "\"LBBM\" TEXT," + // 12: LBBM
                "\"NBBM\" TEXT," + // 13: NBBM
                "\"MXBY1\" TEXT," + // 14: MXBY1
                "\"MXBY2\" TEXT," + // 15: MXBY2
                "\"MXBY3\" TEXT," + // 16: MXBY3
                "\"MXBY4\" TEXT," + // 17: MXBY4
                "\"LBMC\" TEXT);"); // 18: LBMC
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TCSD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TCSD entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String XH = entity.getXH();
        if (XH != null) {
            stmt.bindString(2, XH);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String XMBH1 = entity.getXMBH1();
        if (XMBH1 != null) {
            stmt.bindString(4, XMBH1);
        }
 
        String XMMC1 = entity.getXMMC1();
        if (XMMC1 != null) {
            stmt.bindString(5, XMMC1);
        }
 
        String DW1 = entity.getDW1();
        if (DW1 != null) {
            stmt.bindString(6, DW1);
        }
        stmt.bindDouble(7, entity.getSL());
 
        String SFXZ = entity.getSFXZ();
        if (SFXZ != null) {
            stmt.bindString(8, SFXZ);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(9, TM);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(10, XGSJ);
        }
        stmt.bindDouble(11, entity.getDJ());
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(12, BZ);
        }
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(13, LBBM);
        }
 
        String NBBM = entity.getNBBM();
        if (NBBM != null) {
            stmt.bindString(14, NBBM);
        }
 
        String MXBY1 = entity.getMXBY1();
        if (MXBY1 != null) {
            stmt.bindString(15, MXBY1);
        }
 
        String MXBY2 = entity.getMXBY2();
        if (MXBY2 != null) {
            stmt.bindString(16, MXBY2);
        }
 
        String MXBY3 = entity.getMXBY3();
        if (MXBY3 != null) {
            stmt.bindString(17, MXBY3);
        }
 
        String MXBY4 = entity.getMXBY4();
        if (MXBY4 != null) {
            stmt.bindString(18, MXBY4);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(19, LBMC);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TCSD entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String XH = entity.getXH();
        if (XH != null) {
            stmt.bindString(2, XH);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String XMBH1 = entity.getXMBH1();
        if (XMBH1 != null) {
            stmt.bindString(4, XMBH1);
        }
 
        String XMMC1 = entity.getXMMC1();
        if (XMMC1 != null) {
            stmt.bindString(5, XMMC1);
        }
 
        String DW1 = entity.getDW1();
        if (DW1 != null) {
            stmt.bindString(6, DW1);
        }
        stmt.bindDouble(7, entity.getSL());
 
        String SFXZ = entity.getSFXZ();
        if (SFXZ != null) {
            stmt.bindString(8, SFXZ);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(9, TM);
        }
 
        String XGSJ = entity.getXGSJ();
        if (XGSJ != null) {
            stmt.bindString(10, XGSJ);
        }
        stmt.bindDouble(11, entity.getDJ());
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(12, BZ);
        }
 
        String LBBM = entity.getLBBM();
        if (LBBM != null) {
            stmt.bindString(13, LBBM);
        }
 
        String NBBM = entity.getNBBM();
        if (NBBM != null) {
            stmt.bindString(14, NBBM);
        }
 
        String MXBY1 = entity.getMXBY1();
        if (MXBY1 != null) {
            stmt.bindString(15, MXBY1);
        }
 
        String MXBY2 = entity.getMXBY2();
        if (MXBY2 != null) {
            stmt.bindString(16, MXBY2);
        }
 
        String MXBY3 = entity.getMXBY3();
        if (MXBY3 != null) {
            stmt.bindString(17, MXBY3);
        }
 
        String MXBY4 = entity.getMXBY4();
        if (MXBY4 != null) {
            stmt.bindString(18, MXBY4);
        }
 
        String LBMC = entity.getLBMC();
        if (LBMC != null) {
            stmt.bindString(19, LBMC);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TCSD readEntity(Cursor cursor, int offset) {
        TCSD entity = new TCSD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XH
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XMBH
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // XMBH1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // XMMC1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DW1
            cursor.getFloat(offset + 6), // SL
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SFXZ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // TM
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // XGSJ
            cursor.getFloat(offset + 10), // DJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BZ
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LBBM
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // NBBM
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // MXBY1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // MXBY2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // MXBY3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // MXBY4
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // LBMC
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TCSD entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXMBH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXMBH1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXMMC1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDW1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSL(cursor.getFloat(offset + 6));
        entity.setSFXZ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTM(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXGSJ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDJ(cursor.getFloat(offset + 10));
        entity.setBZ(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLBBM(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNBBM(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMXBY1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMXBY2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMXBY3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMXBY4(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLBMC(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TCSD entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TCSD entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TCSD entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
