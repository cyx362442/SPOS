package com.duowei.spos.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.duowei.spos.bean.DMKWDYDP;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DMKWDYDP".
*/
public class DMKWDYDPDao extends AbstractDao<DMKWDYDP, Long> {

    public static final String TABLENAME = "DMKWDYDP";

    /**
     * Properties of entity DMKWDYDP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property PZBM = new Property(1, String.class, "PZBM", false, "PZBM");
        public final static Property XMBH = new Property(2, String.class, "XMBH", false, "XMBH");
        public final static Property XH = new Property(3, String.class, "XH", false, "XH");
        public final static Property DW = new Property(4, String.class, "DW", false, "DW");
        public final static Property XMMC = new Property(5, String.class, "XMMC", false, "XMMC");
        public final static Property Id = new Property(6, String.class, "id", false, "ID");
        public final static Property TM = new Property(7, String.class, "TM", false, "TM");
    }


    public DMKWDYDPDao(DaoConfig config) {
        super(config);
    }
    
    public DMKWDYDPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DMKWDYDP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"PZBM\" TEXT," + // 1: PZBM
                "\"XMBH\" TEXT," + // 2: XMBH
                "\"XH\" TEXT," + // 3: XH
                "\"DW\" TEXT," + // 4: DW
                "\"XMMC\" TEXT," + // 5: XMMC
                "\"ID\" TEXT," + // 6: id
                "\"TM\" TEXT);"); // 7: TM
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DMKWDYDP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DMKWDYDP entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String PZBM = entity.getPZBM();
        if (PZBM != null) {
            stmt.bindString(2, PZBM);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String XH = entity.getXH();
        if (XH != null) {
            stmt.bindString(4, XH);
        }
 
        String DW = entity.getDW();
        if (DW != null) {
            stmt.bindString(5, DW);
        }
 
        String XMMC = entity.getXMMC();
        if (XMMC != null) {
            stmt.bindString(6, XMMC);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(7, id);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(8, TM);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DMKWDYDP entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String PZBM = entity.getPZBM();
        if (PZBM != null) {
            stmt.bindString(2, PZBM);
        }
 
        String XMBH = entity.getXMBH();
        if (XMBH != null) {
            stmt.bindString(3, XMBH);
        }
 
        String XH = entity.getXH();
        if (XH != null) {
            stmt.bindString(4, XH);
        }
 
        String DW = entity.getDW();
        if (DW != null) {
            stmt.bindString(5, DW);
        }
 
        String XMMC = entity.getXMMC();
        if (XMMC != null) {
            stmt.bindString(6, XMMC);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(7, id);
        }
 
        String TM = entity.getTM();
        if (TM != null) {
            stmt.bindString(8, TM);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DMKWDYDP readEntity(Cursor cursor, int offset) {
        DMKWDYDP entity = new DMKWDYDP( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PZBM
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XMBH
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // XH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // XMMC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // TM
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DMKWDYDP entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPZBM(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXMBH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXMMC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTM(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DMKWDYDP entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DMKWDYDP entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DMKWDYDP entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
